{"version":3,"sources":["globals/scss/_colors.scss","components/Header/Header.js","components/Scoreboard/Scoreboard.js","components/QuizCard/QuizCard.js","actions/index.js","actions/api.js","components/NextButton/NextButton.js","components/Results/Results.js","components/Quiz/Quiz.js","components/App/App.js","reducers/index.js","index.js","components/Header/Header.scss","components/Scoreboard/Scoreboard.scss","components/QuizCard/QuizCard.scss"],"names":["module","exports","black","white","midGray","darkPurple","purple","lightGreen","lightMidGreen","lightDarkGreen","lightRed","lightBlue","lightPurple","lightAqua","Header","react_default","a","createElement","className","Scoreboard","props","correctAnswers","maxQuestions","pastQuestionsLength","QuizCard","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","indexOfCorrectAnswer","getIndexOfCorrectAnswer","_this$props$item","item","answer","options","forEach","option","index","setState","inherits","createClass","key","value","_this$props","classes","isQuestionAnswered","updateQuestionInfo","Card_default","quiz_card","CardContent_default","Typography_default","typography_media_query","variant","question","map","CardActions_default","Button_default","quiz_card_option__button_correct","quiz_card_option__button","quiz_card_option__button_incorrect","color","disabled","fullWidth","onClick","id","size","Component","connect","dispatch","isQuestionCorrect","questionId","type","withStyles","theme","defineProperty","width","height","overflowY","breakpoints","between","justifyContent","fontSize","backgroundColor","sassColors","&:hover","background","&:disabled","axios","require","getQuestionsAPI","create","baseURL","get","then","response","payload","data","catch","error","console","log","updatePastQuestions","button","marginTop","marginBottom","isLastQuestion","buttonLabel","results_card","results_info","textAlign","paddingBottom","media","minHeight","message","paddingTop","DisplayMessage","CardMedia_default","image","title","pastQuestions","questionInfo","apiOneQuestion","components_Scoreboard_Scoreboard","components_QuizCard_QuizCard","components_Results_Results","components_NextButton_NextButton","App","isArray","components_Header_Header","components_Quiz_Quiz","CircularProgress_default","initialState","apiAllQuestions","store","createStore","undefined","action","getRandomNumber","Math","ceil","random","randomNumber","indexOf","filter","_ref","objectSpread","applyMiddleware","thunkMiddleware","createMuiTheme","palette","primary","main","typography","useNextVariants","ReactDOM","render","react_redux_es","core_styles","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.4e0aa640.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"black\":\"#000\",\"white\":\"#fff\",\"midGray\":\"#a3a3a3\",\"darkPurple\":\"#03223b\",\"purple\":\"#60607e\",\"lightGreen\":\"#a5d6a7\",\"lightMidGreen\":\"#00f59e\",\"lightDarkGreen\":\"#11c574\",\"lightRed\":\"#ef9a9a\",\"lightBlue\":\"#81d4fa\",\"lightPurple\":\"#b39ddb\",\"lightAqua\":\"#80cbc4\"};","// @vendors\nimport React from 'react';\n\n// @styles\nimport './Header.scss';\n\nconst Header = () => (\n    <div className=\"header\">\n        <div className=\"header__logo\" />\n    </div>\n);\n\nexport default Header;\n","// @vendors\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// @styles\nimport './Scoreboard.scss';\n\nconst Scoreboard = (props) => {\n    const { correctAnswers, maxQuestions, pastQuestionsLength } = props;\n    return (\n        /*eslint-disable */\n        <div className=\"scoreboard\">\n            <h3 className=\"scoreboard__info\">{(pastQuestionsLength < maxQuestions) ? pastQuestionsLength : maxQuestions} of {maxQuestions} </h3>\n            <h3 className=\"scoreboard__info\">Grade: {correctAnswers * 10}% </h3>\n        </div>\n        /* eslint-enable */\n    );\n};\n\nScoreboard.propTypes = {\n    correctAnswers: PropTypes.number.isRequired,\n    maxQuestions: PropTypes.number.isRequired,\n    pastQuestionsLength: PropTypes.number.isRequired\n};\n\nexport default Scoreboard;\n","// @vendors\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\n\n// @material-ui\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\n// @actions\nimport { updateQuestionInfo } from '../../actions/index';\n\n// @styles\nimport './QuizCard.scss';\nimport sassColors from '../../globals/scss/_colors.scss';\n\n// Setting material-ui classes\nconst styles = theme => ({\n    quiz_card: {\n        width: '60%',\n        height: '100vh',\n        overflowY: 'scroll',\n        [theme.breakpoints.between('xs', 'sm')]: {\n            width: '95%'\n        }\n    },\n    quiz_card_option__button: {\n        justifyContent: 'flex-start',\n        fontSize: '1.10rem',\n        backgroundColor: sassColors.purple,\n        color: sassColors.white,\n        '&:hover': {\n            background: sassColors.lightPurple\n        },\n        [theme.breakpoints.between('xs', 'sm')]: {\n            fontSize: '1rem'\n        }\n    },\n    quiz_card_option__button_correct: {\n        backgroundColor: sassColors.lightGreen,\n        '&:disabled': {\n            color: sassColors.white\n        }\n    },\n    quiz_card_option__button_incorrect: {\n        backgroundColor: sassColors.lightRed\n    },\n    typography_media_query: {\n        [theme.breakpoints.between('xs', 'sm')]: {\n            fontSize: '1.25rem'\n        }\n    }\n});\n\nexport class QuizCard extends Component {\n    state = {\n        indexOfCorrectAnswer: null\n    };\n\n    componentDidMount() {\n        this.getIndexOfCorrectAnswer();\n    }\n\n    // Getting the index of the correct answer\n    // This will set the green (correct) or red (incorrect) button colors after a user clicks an option\n    getIndexOfCorrectAnswer = () => {\n        const { item: { answer, options } } = this.props;\n        options.forEach((option, index) => {\n            if (option === answer) {\n                this.setState({ indexOfCorrectAnswer: index });\n            }\n        });\n    }\n\n    render() {\n        const {\n            classes,\n            isQuestionAnswered,\n            item,\n            updateQuestionInfo\n        } = this.props;\n        const { indexOfCorrectAnswer } = this.state;\n        return (\n            <Card className={classes.quiz_card}>\n                <CardContent>\n                    <Typography className={classes.typography_media_query} variant=\"h5\">\n                        {item.question}\n                    </Typography>\n                    <div className=\"quizCard__options\">\n                        { item.options.map((option, index) => (\n                            <CardActions key={index}>\n                                <Button\n                                    /*eslint-disable */\n                                    className={(isQuestionAnswered) ? (indexOfCorrectAnswer === index) ? `${classes.quiz_card_option__button_correct} ${classes.quiz_card_option__button}` : `${classes.quiz_card_option__button_incorrect} ${classes.quiz_card_option__button}` : classes.quiz_card_option__button}\n                                    /* eslint-enable */\n                                    color=\"primary\"\n                                    disabled={isQuestionAnswered}\n                                    fullWidth\n                                    onClick={() => updateQuestionInfo(true, (indexOfCorrectAnswer === index), item.id)}\n                                    size=\"large\"\n                                >\n                                    {option}\n                                </Button>\n                            </CardActions>\n                        ))\n                        }\n                    </div>\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    updateQuestionInfo: (isQuestionAnswered, isQuestionCorrect, questionId) => dispatch(updateQuestionInfo(isQuestionAnswered, isQuestionCorrect, questionId))\n});\n\nQuizCard.propTypes = {\n    classes: PropTypes.object.isRequired,\n    isQuestionAnswered: PropTypes.bool.isRequired,\n    item: PropTypes.object.isRequired,\n    updateQuestionInfo: PropTypes.func.isRequired\n};\n\nexport default connect(null, mapDispatchToProps)(withStyles(styles)(QuizCard));\n","export const GET_QUESTIONS_DATA = 'GET_QUESTIONS_DATA';\nexport const getQuestionsData = data => ({\n    type: GET_QUESTIONS_DATA,\n    payload: data\n});\n\nexport const UPDATE_QUESTION_INFO = 'UPDATE_QUESTION_INFO';\nexport const updateQuestionInfo = (isQuestionAnswered, isQuestionCorrect, questionId) => ({\n    type: UPDATE_QUESTION_INFO,\n    isQuestionAnswered,\n    isQuestionCorrect,\n    questionId\n});\n\nexport const UPDATE_PAST_QUESTIONS = 'UPDATE_PAST_QUESTIONS';\nexport const updatePastQuestions = () => ({\n    type: UPDATE_PAST_QUESTIONS\n});\n","import { getQuestionsData } from './index';\n\nconst axios = require('axios');\n\nexport const getQuestionsAPI = () => (dispatch) => {\n    const ax = axios.create({\n        baseURL: 'http://robertvarela.com/keep-austin-nerdy'\n    });\n    ax.get('questions.json')\n        .then(response => dispatch(getQuestionsData(response.data)))\n        .catch(error => console.log('Error', error));\n};\n","// @vendors\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\n\n// @material-ui\nimport Button from '@material-ui/core/Button';\n\n// @actions\nimport { getQuestionsAPI } from '../../actions/api';\nimport { updatePastQuestions } from '../../actions/index';\n\n// Setting material-ui classes\nconst styles = {\n    button: {\n        marginTop: '10px',\n        marginBottom: '10px'\n    }\n};\n\nexport const NextButton = (props) => {\n    const {\n        classes,\n        getQuestionsAPI,\n        isQuestionAnswered,\n        maxQuestions,\n        pastQuestionsLength,\n        updatePastQuestions\n    } = props;\n    // This boolean will set the buttonLabel and the color of the button\n    const isLastQuestion = (pastQuestionsLength === maxQuestions);\n    const buttonLabel = (isLastQuestion) ? 'Finish' : 'Next';\n    return (\n        <Button\n            className={classes.button}\n            color={isLastQuestion ? 'secondary' : 'primary'}\n            disabled={!isQuestionAnswered}\n            onClick={() => {\n                getQuestionsAPI();\n                updatePastQuestions();\n            }}\n            size=\"large\"\n            variant=\"contained\"\n        >\n            {buttonLabel}\n        </Button>\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    getQuestionsAPI: () => dispatch(getQuestionsAPI()),\n    updatePastQuestions: () => dispatch(updatePastQuestions())\n});\n\nNextButton.propTypes = {\n    classes: PropTypes.object.isRequired,\n    getQuestionsAPI: PropTypes.func.isRequired,\n    isQuestionAnswered: PropTypes.bool.isRequired,\n    maxQuestions: PropTypes.number.isRequired,\n    pastQuestionsLength: PropTypes.number.isRequired,\n    updatePastQuestions: PropTypes.func.isRequired\n};\n\nexport default connect(null, mapDispatchToProps)(withStyles(styles)(NextButton));\n","// @vendors\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\n// @material-ui\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\n\n// Setting material-ui classes\nconst styles = theme => ({\n    results_card: {\n        width: '60%',\n        height: '100vh',\n        overflowY: 'scroll',\n        marginBottom: '10px',\n        [theme.breakpoints.between('xs', 'sm')]: {\n            width: '95%'\n        }\n    },\n    results_info: {\n        textAlign: 'right',\n        paddingBottom: '16px'\n    },\n    media: {\n        width: '100%',\n        minHeight: '50vh'\n    },\n    message: {\n        paddingTop: '16px',\n        paddingBottom: '16px'\n    },\n    typography_media_query: {\n        [theme.breakpoints.between('xs', 'sm')]: {\n            fontSize: '1.25rem'\n        }\n    }\n});\n\nconst Results = (props) => {\n    const { classes, correctAnswers } = props;\n    const DisplayMessage = (correctAnswers < 10)\n        ? `You got a ${correctAnswers * 10}% score?! Why not aim for 100%. It'd be a lot cooler if you did.`\n        : 'You got a 100% score!. Alright, alright, alright!';\n    return (\n        /*eslint-disable */\n        <Card className={classes.results_card}>\n            <CardContent>\n                <Typography \n                    className={`${classes.results_info} ${classes.typography_media_query}`} \n                    variant='h5'\n                > \n                    Correct: {correctAnswers} / Incorrect: {10 - correctAnswers} \n                </Typography>\n                <CardMedia\n                    className={classes.media}\n                    image={(correctAnswers < 10) \n                        ? 'https://media1.tenor.com/images/59c2dda858ea7e6cde42ec72315ff606/tenor.gif?itemid=5205414'\n                        : 'https://media.giphy.com/media/g5zvwUa9720pO/giphy.gif'\n                    }\n                    title='Matthew Mcconaughey'\n                />\n                <Typography \n                    className={`${classes.message} ${classes.typography_media_query}`} \n                    variant='h5'\n                > \n                    {DisplayMessage}\n                </Typography>\n            </CardContent>\n        </Card>\n        /* eslint-enable */\n    );\n};\n\nResults.propTypes = {\n    classes: PropTypes.object.isRequired,\n    correctAnswers: PropTypes.number.isRequired\n};\n\nexport default withStyles(styles)(Results);\n","// @vendors\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n// @components\nimport Scoreboard from '../Scoreboard/Scoreboard';\nimport QuizCard from '../QuizCard/QuizCard';\nimport NextButton from '../NextButton/NextButton';\nimport Results from '../Results/Results';\n\n// @styles\nimport './Quiz.scss';\n\nexport const Quiz = (props) => {\n    const {\n        correctAnswers,\n        isQuestionAnswered,\n        maxQuestions,\n        pastQuestionsLength,\n        questionInfo\n    } = props;\n    return (\n        <div className=\"quiz\">\n            <Scoreboard\n                correctAnswers={correctAnswers}\n                maxQuestions={maxQuestions}\n                pastQuestionsLength={pastQuestionsLength}\n            />\n            {(pastQuestionsLength <= maxQuestions)\n                ? questionInfo.map(item => (\n                    <QuizCard\n                        key={item.id}\n                        item={item}\n                        isQuestionAnswered={isQuestionAnswered}\n                    />\n                ))\n                : <Results correctAnswers={correctAnswers} />\n            }\n            {(pastQuestionsLength <= maxQuestions)\n                ? (\n                    <NextButton\n                        isQuestionAnswered={isQuestionAnswered}\n                        maxQuestions={maxQuestions}\n                        pastQuestionsLength={pastQuestionsLength}\n                    />\n                )\n                : null\n            }\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    correctAnswers: state.correctAnswers,\n    isQuestionAnswered: state.isQuestionAnswered,\n    maxQuestions: state.maxQuestions,\n    pastQuestionsLength: state.pastQuestions.length,\n    questionInfo: state.apiOneQuestion\n});\n\nQuiz.propTypes = {\n    correctAnswers: PropTypes.number.isRequired,\n    isQuestionAnswered: PropTypes.bool.isRequired,\n    maxQuestions: PropTypes.number.isRequired,\n    pastQuestionsLength: PropTypes.number.isRequired,\n    questionInfo: PropTypes.array.isRequired\n};\n\nexport default connect(mapStateToProps)(Quiz);\n","// @vendors\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n// @material-ui\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// @components\nimport Header from '../Header/Header';\nimport Quiz from '../Quiz/Quiz';\n\n// @actions\nimport { getQuestionsAPI } from '../../actions/api';\n\n// @styles\nimport './App.scss';\n\nclass App extends Component {\n    componentDidMount() {\n        const { getQuestionsAPI } = this.props;\n        getQuestionsAPI();\n    }\n\n    render() {\n        const { questionInfo } = this.props;\n        // Display CircularProgress if app is loading\n        if (!Array.isArray(questionInfo) || !questionInfo.length) {\n            return (\n                <CircularProgress />\n            );\n        }\n        return (\n            <div className=\"App\">\n                <Header />\n                <Quiz />\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    getQuestionsAPI: () => dispatch(getQuestionsAPI())\n});\n\nconst mapStateToProps = state => ({\n    questionInfo: state.apiOneQuestion\n});\n\nApp.propTypes = {\n    getQuestionsAPI: PropTypes.func.isRequired,\n    questionInfo: PropTypes.array.isRequired\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const initialState = {\n    apiAllQuestions: [],\n    apiOneQuestion: [],\n    correctAnswers: 0,\n    isQuestionAnswered: false,\n    maxQuestions: 10,\n    questionId: null,\n    pastQuestions: [0]\n};\n\nexport function reducer(state = initialState, action) {\n    switch (action.type) {\n        case 'GET_QUESTIONS_DATA':\n            const data = action.payload;\n            // Creating a random number based on that max number\n            const getRandomNumber = () => Math.ceil(Math.random() * (data.length));\n            let randomNumber = getRandomNumber();\n\n            // If randomNumber is found in the pastQuestions array set another number to randomNumber\n            // To not show duplicate questions in our 10 question quiz\n            while (state.pastQuestions.indexOf(randomNumber) !== -1) {\n                randomNumber = getRandomNumber();\n            }\n\n            // Filter to get 1 random question from question.json\n            const question = data.filter(({ id }) => id === randomNumber);\n            return {\n                ...state,\n                apiAllQuestions: data,\n                apiOneQuestion: question,\n                isQuestionAnswered: false\n            };\n        case 'UPDATE_QUESTION_INFO':\n            const { isQuestionAnswered, isQuestionCorrect, questionId } = action;\n            const correctAnswers = isQuestionCorrect ? state.correctAnswers + 1 : state.correctAnswers;\n            return {\n                ...state,\n                correctAnswers,\n                isQuestionAnswered,\n                questionId\n            };\n        case 'UPDATE_PAST_QUESTIONS':\n            return {\n                ...state,\n                pastQuestions: state.pastQuestions.concat(state.questionId)\n            };\n        default:\n            return state;\n    }\n}\n","// @vendors\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunkMiddleware from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\n// @containers\nimport Root from './components/App/App';\n\n// @reducers\nimport { reducer } from './reducers';\n\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\n\n// Setting the Material-UI theme\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#81d4fa'\n        }\n    },\n    typography: {\n        useNextVariants: true\n    }\n});\n\nconst App = () => (\n    <MuiThemeProvider theme={theme}>\n        <Root />\n    </MuiThemeProvider>\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"black\":\"#000\",\"white\":\"#fff\",\"midGray\":\"#a3a3a3\",\"darkPurple\":\"#03223b\",\"purple\":\"#60607e\",\"lightGreen\":\"#a5d6a7\",\"lightMidGreen\":\"#00f59e\",\"lightDarkGreen\":\"#11c574\",\"lightRed\":\"#ef9a9a\",\"lightBlue\":\"#81d4fa\",\"lightPurple\":\"#b39ddb\",\"lightAqua\":\"#80cbc4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"black\":\"#000\",\"white\":\"#fff\",\"midGray\":\"#a3a3a3\",\"darkPurple\":\"#03223b\",\"purple\":\"#60607e\",\"lightGreen\":\"#a5d6a7\",\"lightMidGreen\":\"#00f59e\",\"lightDarkGreen\":\"#11c574\",\"lightRed\":\"#ef9a9a\",\"lightBlue\":\"#81d4fa\",\"lightPurple\":\"#b39ddb\",\"lightAqua\":\"#80cbc4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"black\":\"#000\",\"white\":\"#fff\",\"midGray\":\"#a3a3a3\",\"darkPurple\":\"#03223b\",\"purple\":\"#60607e\",\"lightGreen\":\"#a5d6a7\",\"lightMidGreen\":\"#00f59e\",\"lightDarkGreen\":\"#11c574\",\"lightRed\":\"#ef9a9a\",\"lightBlue\":\"#81d4fa\",\"lightPurple\":\"#b39ddb\",\"lightAqua\":\"#80cbc4\"};"],"sourceRoot":""}